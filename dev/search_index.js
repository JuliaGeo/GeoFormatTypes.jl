var documenterSearchIndex = {"docs":
[{"location":"#GeoFormatTypes.jl","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.jl","text":"","category":"section"},{"location":"","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.jl","text":"Modules = [GeoFormatTypes]","category":"page"},{"location":"#GeoFormatTypes.GeoFormatTypes","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.GeoFormatTypes","text":"GeoFormatTypes\n\n(Image: Stable) (Image: Dev) (Image: CI)\n\nGeoFormatTypes defines wrapper types to make it easy to pass and dispatch on geographic formats like Well Known Text or GeoJSON between packages. This way information about what format is contained is kept for later use, - instead of passing a String or Int that could mean anything.\n\nWrapper types also allow methods such as convert to work with data in multiple formats, instead of defining lists of format-specific handling methods. Currently ArchGDAL.jl is privileged to define convert methods for GeoFormatTypes.jl objects, using GDAL. When it is loaded, objects can be converted from one format to another:\n\njulia> using GeoFormatTypes, ArchGDAL\n\njulia> convert(WellKnownText, EPSG(4326))\nWellKnownText{GeoFormatTypes.CRS, String}(GeoFormatTypes.CRS(), \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\")\n\nArchGDAL.jl is not a direct dependency of GeoFormatTypes.jl, so small packages that handle geospatial formats in some way can depend on GeoFormatTypes.jl without worry about large dependencies.\n\nOne complexity of GeoFormat objects is that some formats can hold either CRS (Coordinate Reference System) or geometric data, or even both at the same time.\n\nThis is handled using the CRS, Geom and Mixed traits. When the contents are explicitly known to be e.g. crs data, then CRS can be used, for example with all types of well known text:\n\ncrs = WellKnownText2(CRS(), crs_string)\n\nIf the contents are not known, the default Mixed() will mostly do the right thing anyway - it can be converted to either CRS or geometry formats using convert, given that it is actually possible to do with the contained data.\n\nWe thank Julia Computing for supporting contributions to this package.\n\n\n\n\n\n","category":"module"},{"location":"#GeoFormatTypes.AbstractWellKnownText","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.AbstractWellKnownText","text":"AbstractWellKnownText <: MixedFormat\n\nWell known text has a number of versions and standards, and can hold either coordinate reference systems or geometric data in string format.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.CRS","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.CRS","text":"CRS <: FormatMode\n\nCRS()\n\nTrait specifying that a format object, like WellKnownText, contains only coordinate reference system data.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.CoordSys","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.CoordSys","text":"CoordSys <: CoordinateReferenceSystemFormat\n\nCoordSys(val)\n\nWrapper for a Mapinfo CoordSys string.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.CoordinateReferenceSystemFormat","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.CoordinateReferenceSystemFormat","text":"CoordinateReferenceSystemFormat <: GeoFormat\n\nFormats representing coordinate reference systems\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.EPSG","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.EPSG","text":"EPSG <: CoordinateReferenceSystemFormat\n\nEPSG(input)\n\nEPSG code representing a coordinate reference system from the EPSG spatial reference system registry.\n\nString input must start with \"EPSG:\". EPSG can be converted to an Int or String using convert, or another CoordinateReferenceSystemFormat when ArchGDAL.jl is loaded.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.ESRIWellKnownText","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.ESRIWellKnownText","text":"ESRIWellKnownText <: AbstractWellKnownText\n\nESRIWellKnownText(x::String)\nESRIWellKnownText(::CRS, x::String)\nESRIWellKnownText(::Geom, x::String)\n\nWrapper for Well-known text strings, following the ESRI standard.\n\nThese may hold CRS or geometry data. The default mode is Unknown, and conversions to either type will be attempted where possible. A specific type can be specified if it is known, e.g:\n\ncrs = ESRIWellKnownText(CRS(), crs_string)\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.Extended","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.Extended","text":"Extended <: MixedFormatMode <: FormatMode\n\nExtended()\n\nTrait specifying that a mixed format object, like WellKnownText, contains both geometry and coordinate reference system.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.FormatMode","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.FormatMode","text":"FormatMode\n\nTraits to indicate the format type, such as Geom, CRS or MixedFormat.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.GML","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.GML","text":"GML <: MixedFormat\n\nWrapper for Geography Markup Language string.\n\nThese contain geometry data, but may also have embedded crs information. GML can be converted to either a GeometryFormat or CoordinateReferenceSystemFormat.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.GeoFormat","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.GeoFormat","text":"GeoFormat\n\nAbstract supertype for geospatial data formats\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.GeoJSON","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.GeoJSON","text":"GeoJSON <: GeometryFormat\n\nWrapper for a GeoJSON String or Dict.\n\nConversion between Dict and String values is not yet handled.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.Geom","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.Geom","text":"Geom <: FormatMode\n\nGeom()\n\nTrait specifying that a format object, like WellKnownText, contains geometry data.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.GeometryFormat","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.GeometryFormat","text":"GeometryFormat <: GeoFormat\n\nFormats representing geometries. These wrappers simply mark string formats that may optionally be converted to Geoetry objects at a later point.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.KML","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.KML","text":"KML <: GeometryFormat\n\nWrapper object for \"Keyhole Markup Language\" (KML) strings.\n\nSee: https://www.ogc.org/standards/kml/\n\nCan be converted to a String. Conversion to crs will convert from EPSG(4326), which is the default for KML.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.MixedFormat","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.MixedFormat","text":"MixedFormat <: GeoFormat\n\nFormats that may hold either or both coordinate reference systems and geometries.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.MixedFormatMode","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.MixedFormatMode","text":"MixedFormatMode <: FormatMode\n\nAbstract subtype of FormatMode where both geometry and coordinate reference system data are or may be present.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.ProjJSON","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.ProjJSON","text":"ProjJSON <: CoordinateReferenceSystemFormat\n\nProjJSON(x::Dict{String,<:Any})\nProjJSON(x::String)\n\nWrapper for PROJJSON.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.ProjString","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.ProjString","text":"ProjString <: CoordinateReferenceSystemFormat\n\nProjString(x::String)\n\nWrapper for Proj strings. String input must start with \"+proj=\".\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.Unknown","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.Unknown","text":"Unknown <: MixedFormatMode <: FormatMode\n\nUnknown()\n\nTrait specifying that for a mixed format object, like WellKnownText, it is unknown whether it stores geometry or coordinate reference system data, or both.\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.WellKnownBinary","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.WellKnownBinary","text":"WellKnownBinary <: MixedFormat\n\nWrapper for Well-known binary (WKB) objects.\n\nThese may hold CRS or geometry data. The default mode is Unknown, and conversions to either type will be attempted where possible. A specific type can be specified if it is known, e.g:\n\ncrs = WellKnownBinary(CRS(), crs_blob)\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.WellKnownText","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.WellKnownText","text":"WellKnownText <: AbstractWellKnownText\n\nWellKnownText(val)\nWellKnownText(mode, val)\n\nWrapper for Well-known text (WKT) v1, following the OGC standard. These may hold CRS or geometry data.\n\nThese may hold CRS or geometry data. The default mode is Mixed(), and conversions to either type will be attempted where possible. A specific type can be specified if it is known, e.g.:\n\ngeom = WellKnownText(Geom(), geom_string)\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.WellKnownText2","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.WellKnownText2","text":"WellKnownText2 <: AbstractWellKnownText\n\nWellKnownText2(val)\nWellKnownText2(mode, val)\n\nWrapper for Well-known text v2 objects, following the new OGC standard.\n\nThese may hold CRS or geometry data. The default mode is Unknown(), and conversions to either type will be attempted where possible. A specific type can be specified if it is known, e.g.:\n\ncrs = WellKnownText2(CRS(), crs_string)\n\n\n\n\n\n","category":"type"},{"location":"#GeoFormatTypes.val","page":"GeoFormatTypes.jl","title":"GeoFormatTypes.val","text":"val(f::GeoFormat)\n\nGet the contained value of a GeoFormat type.\n\n\n\n\n\n","category":"function"}]
}
